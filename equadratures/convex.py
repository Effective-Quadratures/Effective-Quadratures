"""A library of convex optimizers"""
import numpy as np
from scipy.linalg import det, cholesky, lstsq  

def maxdet(A, k):
    """
    Formulation of the determinant maximization as a convex program
    """
    maxiter = 30
    n_tol = 1e-3
    gap = 1.005

    # For backtracking line search parameters
    alpha = 0.01
    beta = 0.5

    # Assuming the input matrix is an np.matrix()
    m, n = A.shape
    z = np.ones((m, 1)) * float(k)/float(m)
    g = np.zeros((m, 1))
    ones_m = np.ones((m, 1))
    ones_m_transpose = np.ones((1, m))
    kappa = np.log(gap) * n/m

    # Objective function
    Z = diag(z)
    fz = -np.log(np.linalg.det(A.T * Z * A)) - kappa * np.sum(np.log(z) + np.log(1.0 - z))

    print 'Iteration \t Step size \t Newton decrement \t Objective \t log_det'
    print str(0)+'\t'+'--'+'\t'+'--'+'\t'+str(-fz)+'\t'+str(np.log(np.linalg.det(A.T * Z * A)) )
        
    # Optimization loop!
    for i in range(0, maxiter) :
        Z = diag(z)
        W = np.linalg.inv(A.T * Z * A)
        V = A * W * A.T
        vo = np.matrix(np.diag(V))
        vo = vo.T

        # define some z operations
        one_by_z = ones_m / z
        one_by_one_minus_z = ones_m / (ones_m - z)
        one_by_z2 = ones_m / z**2
        one_by_one_minus_z2 = ones_m / (ones_m - z)**2
        g = -vo- kappa * (one_by_z - one_by_one_minus_z)
        H = np.multiply(V, V) + kappa * diag( one_by_z2 + one_by_one_minus_z2)

        # Textbook Newton's method -- compute inverse of Hessian
        R = np.matrix(cholesky(H) )
        u = lstsq(R.T, g)
        Hinvg = lstsq(R, u[0])
        Hinvg = Hinvg[0]
        v = lstsq(R.T, ones_m)
        Hinv1 = lstsq(R, v[0])
        Hinv1 = Hinv1[0]
        dz = -Hinvg + (np.dot( ones_m_transpose , Hinvg ) / np.dot(ones_m_transpose , Hinv1)) * Hinv1


        deczi = indices(dz, lambda x: x < 0)
        inczi = indices(dz, lambda x: x > 0)
        a1 = 0.99* -z[deczi, 0] / dz[deczi, 0]
        a2 = (1 - z[inczi, 0] )/dz[inczi, 0]  
        s = np.min(np.vstack([1.0, np.vstack(a1), np.vstack(a2) ] )  )
        flag = 1

        while flag == 1:
            zp = z + s*dz
            Zp = diag(zp)
            fzp = -np.log(np.linalg.det(A.T * Zp * A) ) - kappa * np.sum(np.log(zp) + np.log(1 - zp)  )
            const = fz + alpha * s * g.T * dz
            if fzp <= const[0,0]:
                flag = 2
            if flag != 2:
                s = beta * s
        z = zp
        fz = fzp
        sig = -g.T * dz * 0.5
        print str(i+1)+'\t'+str(s)+'\t'+str(sig[0,0])+'\t'+str(-fz)+'\t'+str(np.log(np.linalg.det(A.T * diag(z) * A)) )
        if( sig[0,0] <= n_tol):
            break
        zsort = np.sort(z, axis=0)
        thres = zsort[m - k - 1]
        zhat, not_used = find(z, thres)
    
    zsort = np.sort(z, axis=0)
    thres = zsort[m - k - 1]
    zhat, not_used = find(z, thres)
    p, q = zhat.shape
    Zhat = diag(zhat)
    L = np.log(np.linalg.det(A.T * Zhat  * A)) 
    ztilde  = z
    Utilde = np.log(np.linalg.det(A.T * diag(z) * A))  + 2 * m * kappa

    return zhat, L, ztilde, Utilde

def binary2indices(zhat):
    """
    Simple utility that converts a binary array into one with indices!
    """
    pvec = []
    m, n = zhat.shape
    for i in range(0, m):
        if(zhat[i,0] == 1):
            pvec.append(i)
    return pvec
            
def indices(a, func): 
    return [i for (i, val) in enumerate(a) if func(val)]

def diag(vec):
    m = len(vec)
    D = np.zeros((m, m))
    for i in range(0, m):
        D[i,i] = vec[i,0]
    return D

def find(vec, thres):
    t = []
    vec_new = []
    for i in range(0, len(vec)):
        if vec[i] > thres:
            t.append(i)
            vec_new.append(1.0)
        else:
            vec_new.append(0.0)
    vec_new = np.matrix(vec_new)
    vec_new = vec_new.T
    return vec_new, t

def test():
    A = np.matrix( [[0.124002503999148,	-0.212199686576617,	0.267349762299687,	-0.304796662905713,	0.328534348120078,	-0.340258635378351, 0.340966415149194,	-0.331449472272965,	0.312487506335153,	-0.284931170115695,	0.249736112466517,	-0.207971637681745,	0.160814561189271,	-0.109533656449671 ,0.0554678183266073],
[0.187571383062699,	-0.304504346671962,	0.342970943205649,	-0.323830768262549,	0.257166931382922,	-0.154900349913245,	0.0317944861641675,	0.0955959597461910,	-0.210662345967238,	0.298651252745599,	-0.348411216638172,	0.353721875321316,	-0.314023554473274,	0.234448916853930,	-0.125149493700444],
[0.231472698678669,	-0.340065082457839,	0.299777851462027,	-0.155128868025817,	-0.0405470427207957,	0.224011212315292,	-0.338084205684424,	0.347846620422468,	-0.250650616298982,	0.0765605772751909,	0.121008404440037,	-0.281645300869941,	0.356343460328603,	-0.322376925230145,	0.190155750944872],
[0.264169148393746,	-0.331460510866917,	0.169632298703436,	0.0952110744664884,	-0.307552449423097,	0.347876614360223,	-0.194236169432099,	-0.0675017366124000	, 0.291960572247422,	-0.354820034781737,	0.221386421959655,	0.0344762228531974,	-0.271330019586556,	0.358341025764034,	-0.247488267414291],
[0.288330717941216,	-0.285145474485966,	-0.00708307953189903,	0.298353289394676,	-0.330903419918912,	0.0767746624987946,	0.244046236605776,	-0.354821222985016,	0.160201080761295,	0.172309025740335,	-0.356769396309298,	0.234643201677457,	0.0891115998557837,	-0.336358575868273	,0.294737039598909],
[0.305090970052837,	-0.208282602857903,	-0.182126044945745,	0.353666995448861,	-0.0933491735919657,	-0.281457489605904,	0.314595080383207,	0.0343557637210484,	-0.341813876517043,	0.234666757202041,	0.157157338548445,	-0.358477292554661,	0.125159884925721,	0.259932530683940,	-0.329947448693215],
[0.314985305472423,	-0.109765573065343,	-0.309398437066761,	0.234536744348398,	0.217691562319867,	-0.322363325036298,	-0.0887632376862326,	0.358288271150084,	-0.0550725438038196,	-0.336309368242181,	0.190246392019029,	0.259908726332983,	-0.294771222600957,	-0.141417462699725,	0.351669713476065],
[0.318259518259518,	-5.03340111671142e-17,	-0.355824958657309,	1.15329708102027e-16,	0.358041958041958	, -1.80716800250645e-16, 	-0.358594066246613,	2.46203716827908e-16,	0.358809502773254,	-3.11729783838688e-16,	-0.358915019465073,	3.77275063679759e-16,	0.358974358974359,	-4.42831158793488e-16,	-0.359010987142300],
[0.314985305472424,	0.109765573065343,	-0.309398437066761,	-0.234536744348399,	0.217691562319867,	0.322363325036299,	-0.0887632376862320,	-0.358288271150085,	-0.0550725438038209,	0.336309368242181,	0.190246392019031,	-0.259908726332983,	-0.294771222600959,	0.141417462699724,	0.351669713476066],
[0.305090970052837,	0.208282602857903,	-0.182126044945746,	-0.353666995448861,	-0.0933491735919647,	0.281457489605905,	0.314595080383207,	-0.0343557637210501	, -0.341813876517044,	-0.234666757202040,	0.157157338548448,	0.358477292554661,	0.125159884925718,	-0.259932530683942,	-0.329947448693214],
[0.288330717941216,	0.285145474485966,	-0.00708307953189916,	-0.298353289394676,	-0.330903419918912,	-0.0767746624987944,	0.244046236605777,	0.354821222985016,	0.160201080761295,	-0.172309025740336,	-0.356769396309299,	-0.234643201677457,	0.0891115998557844,	0.336358575868274,	0.294737039598909],
[0.264169148393746,	0.331460510866918,	0.169632298703436,	-0.0952110744664893,	-0.307552449423098,	-0.347876614360224,	-0.194236169432098,	0.0675017366124018,	0.291960572247423,	0.354820034781737,	0.221386421959653,	-0.0344762228532001	, -0.271330019586558,	-0.358341025764034,	-0.247488267414289],
[0.231472698678669,	0.340065082457838,	0.299777851462027,	0.155128868025818,	-0.0405470427207940,	-0.224011212315290,	-0.338084205684423,	-0.347846620422468,	-0.250650616298984,	-0.0765605772751942,	0.121008404440034,	0.281645300869938,	0.356343460328602,	0.322376925230147	,0.190155750944877],
[0.187571383062699,	0.304504346671962,	0.342970943205650,	0.323830768262549,	0.257166931382922,	0.154900349913245,	0.0317944861641680,	-0.0955959597461906,	-0.210662345967238,	-0.298651252745599,	-0.348411216638172,	-0.353721875321316,	-0.314023554473275	,-0.234448916853932	,-0.125149493700446],
[0.124002503999148,	0.212199686576617,	0.267349762299688,	0.304796662905714,	0.328534348120079,	0.340258635378352,	0.340966415149196,	0.331449472272967,	0.312487506335156,	0.284931170115699,	0.249736112466522,	0.207971637681750,	0.160814561189277,	0.109533656449677,	0.0554678183266146] ] )

    A = A[:, 0:8]
    zhat, L, ztilde, Utilde = maxdet(A, 8)
    print zhat
    pvec = binary2indices(zhat)
    print pvec

test()